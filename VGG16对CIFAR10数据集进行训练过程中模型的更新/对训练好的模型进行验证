import torch
import torchvision
from PIL import Image
from torch import argmax
from torch.nn import Linear
from torch.utils.data import DataLoader
from torch.utils.tensorboard import SummaryWriter

dog='ari.jpg'
dog_pil=Image.open(dog)
print(dog_pil)
dog_pil=dog_pil.convert('RGB')             #避免png，jpg可能是四通道的情况，先把她转换成三通道
my_transforms=torchvision.transforms.Compose([torchvision.transforms.Resize((224,224)),torchvision.transforms.ToTensor()])
my_dog=my_transforms(dog_pil)
print(my_dog.shape)
my_dog1=torch.reshape(my_dog,(1,3,224,224))              #我们的神经网络VGG16要求输出图片的格式是(n,3,224,224)


#载入模型
vgg16=torchvision.models.vgg16(pretrained=False)
vgg16.classifier.add_module('7',Linear(1000,10,))
vgg16.load_state_dict(torch.load('第20轮训练结果的模型参数',map_location=torch.device('cpu')))#在没有gpu的电脑上运行


#验证我们的模型是否加载成功，先对加载好的模型进行测试，用测试集测试正确率
my_data=torchvision.datasets.CIFAR10('C:\\Users\\Lenovo\\PycharmProjects\\pytorch\\LOG',train=False,transform=torchvision.transforms.ToTensor(),download=True)
my_data_load=DataLoader(my_data,64,shuffle=False)
right_number=0
'''for imgs,target in my_data_load:
    with torch.no_grad():
        imgs_load=vgg16(imgs)
        print(imgs_load)
        print(target)
        print(imgs_load.argmax(1)==target)
        right_number=right_number+(imgs_load.argmax(1)==target).sum()
print('使用第二十轮训练结果的正确率为{}'.format(right_number/len(my_data)))
'''
#加载我们自己的照片,总共预测10次，看结果
for i in range(10):
    vgg16.eval()
    with torch.no_grad():
        my_dog_load=vgg16(my_dog1)
        print(my_dog_load.argmax(1))
print(my_data.classes)



结论是：这个模型不太适合
